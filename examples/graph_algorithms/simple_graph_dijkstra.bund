//
// Computes shortest paths from a source vertex to all other
// vertices using Dijkstraâ€™s algorithm.
//

//
// Set starting node as :A and create simple A->B->C graph
// A->B path is weighted 1.0
// B->C path weighted 2.0
//
:A [
  [ :A :B 1.0 ]
  [ :B :C 2.0 ]

]
//
// So, we do have a directed graph with nodes A, B and C
//
[
  :A :B :C
]

//
// Grate graph
//
graph!

//
// Compute shortest paths. Return list with dicts, where key :node indicates
// a node in the graph, and :path indicates weighted path to that node
// run a loop over result
//
graph.paths {
  dup               // Duplicate result for the second get
    :node get .     // Get node name, store in workbench
    :path get .     // Get the weight, store in workbech
  take take         // Taking data from workbench
  // And print the result
  "Name of the node: {A} weighted path to the node: {B}" format println
} loop              // Do the loop
